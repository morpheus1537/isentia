@import "_variables";

@mixin box-sizing() {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    -o-box-sizing: border-box;
    box-sizing: border-box;
}

@mixin transition($time, $property: all) {
    -webkit-transition: $property $time ease-in-out;
    -moz-transition: $property $time ease-in-out;
    -ms-transition: $property $time ease-in-out;
    -o-transition: $property $time ease-in-out;
    transition: $property $time ease-in-out;
}

@mixin transition-prop($property, $value) {
    -webkit-transition-#{$property}: $value;
    -moz-transition-#{$property}: $value;
    -ms-transition-#{$property}: $value;
    -o-transition-#{$property}: $value;
    transition-#{$property}: $value;
}

@mixin pf-transition($time, $property: all) {
    -webkit-transition: -webkit-$property $time ease-in-out;
    -moz-transition: -moz-$property $time ease-in-out;
    -ms-transition: -ms-$property $time ease-in-out;
    -o-transition: -o-$property $time ease-in-out;
    transition: $property $time ease-in-out;
}

@mixin opacity($value) {
    $calc_val: $value * 100;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=${calc_val})";
    filter: alpha(opacity=$calc_val);
    -moz-opacity: $value;
    -khtml-opacity: $value;
    opacity: $value;
}

@mixin transform($val:0%) {
    -webkit-transform: $val;
    -moz-transform:$val;
    -ms-transform: $val;
    -o-transform: $val;
    transform: $val;
}

@mixin transform-prop($property, $val:0%) {
    -webkit-transform-#{$property}: $val;
    -moz-transform-#{$property}:$val;
    -ms-transform-#{$property}: $val;
    -o-transform-#{$property}: $val;
    transform-#{$property}: $val;
}

@mixin border-radius($radius: 6px) {
    -khtml-border-radius:$radius;
    -moz-border-radius:$radius;
    -webkit-border-radius:$radius;
    border-radius:$radius;
}

@mixin boxshadow ($x-offset: 0, $y-offset: 1px, $blur: 2px, $spread: 0, $colour: rgba(0,0,0,0.1)) {
    -webkit-box-shadow: $x-offset $y-offset $blur $spread $colour;
    -moz-box-shadow: $x-offset $y-offset $blur $spread $colour;
    box-shadow: $x-offset $y-offset $blur $spread $colour;
}

@mixin multishadow ($shadow) {
    $shadow: unquote($shadow);
    -webkit-box-shadow: $shadow;
    -moz-box-shadow: $shadow;
    box-shadow: $shadow;
}

@mixin grayscale($perc: 100%) {
    filter: url("data:image/svg+xml;utf8,<svg version='1.1' height='0'><filter id='greyscale'><feColorMatrix type='matrix' values='0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0' /></filter></svg>#greyscale");
    filter: gray;
    -webkit-filter: grayscale($perc);
    filter: grayscale($perc);
}

@mixin flex-align($value: center) {
    -webkit-box-align: $value;
    -moz-box-align: $value;
    -webkit-align-items: $value;
    -ms-flex-align: $value;
    align-items: $value;
}

@mixin flex-justify($value: center) {
    -webkit-box-pack: $value;
    -moz-box-pack: $value;
    -webkit-justify-content: $value;
    -ms-flex-pack: $value;
    justify-content: $value;
}

@mixin flex-wrap($value: wrap) {
    -webkit-flex-wrap: $value;
    -ms-flex-wrap: $value;
    flex-wrap: $value;
}

@mixin flex() {
    -ms-box-orient: horizontal;
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -moz-flex;
    display: -webkit-flex;
    display: flex;
}

@mixin viewport($property, $initialsize, $maxwidth, $unit: vw) {
    #{$property}: ($initialsize*100)/$maxwidth + $unit;
}

/*
 *  KEYFRAMES
 */

@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content; 
    }
    @-moz-keyframes #{$name} {
        @content;
    }
    @-ms-keyframes #{$name} {
        @content;
    }
    @keyframes #{$name} {
        @content;
    } 
}

@mixin animation ($delay, $duration, $animation, $fill: none, $iterate: infinite, $timing: ease-in-out) {
    -webkit-animation-delay: $delay;
    -webkit-animation-duration: $duration;
    -webkit-animation-name: $animation;
    -webkit-animation-fill-mode: $fill;
    -webkit-animation-iteration-count: $iterate;
    -webkit-animation-timing-function: $timing;

    -moz-animation-delay: $delay;
    -moz-animation-duration: $duration;
    -moz-animation-name: $animation;
    -moz-animation-fill-mode: $fill;
    -moz-animation-iteration-count: $iterate;
    -moz-animation-timing-function: $timing;

    animation-delay: $delay;
    animation-duration: $duration;
    animation-name: $animation;
    animation-fill-mode: $fill;
    animation-iteration-count: $iterate;
    animation-timing-function: $timing;
}

@include keyframes(fadeIn) {
    from    {@include opacity(0);}
    to      {@include opacity(1);}
}

@include keyframes(fadeOut) {
    from    {@include opacity(1);}
    to      {@include opacity(0);}
}

@include keyframes(fadeInOut) {
    0%      {@include opacity(0);}
    50%     {@include opacity(1);}
    100%    {@include opacity(0);}
}

@include keyframes(animateItem) {
    0% {
        @include transform(scale(1));   
    }
    50% {
        @include transform(scale(0));
        @include opacity(0);
    }
    100% {
        @include transform(scale(1));
        @include opacity(1);
    }
}

/* FONTS */

@font-face {
    font-family: 'Franklin Gothic Demi';
    src: url('../fonts/FranklinGothic-DemiItalic.eot');
    src: local('Franklin Gothic Demi Italic'), local('FranklinGothic-DemiItalic'),
        url('../fonts/FranklinGothic-DemiItalic.eot?#iefix') format('embedded-opentype'),
        url('../fonts/FranklinGothic-DemiItalic.woff2') format('woff2'),
        url('../fonts/FranklinGothic-DemiItalic.woff') format('woff'),
        url('../fonts/FranklinGothic-DemiItalic.ttf') format('truetype'),
        url('../fonts/FranklinGothic-DemiItalic.svg#FranklinGothic-DemiItalic') format('svg');
    font-weight: normal;
    font-style: italic;
}

@font-face {
    font-family: 'Franklin Gothic Demi';
    src: url('../fonts/FranklinGothic-Demi.eot');
    src: local('Franklin Gothic Demi'), local('FranklinGothic-Demi'),
        url('../fonts/FranklinGothic-Demi.eot?#iefix') format('embedded-opentype'),
        url('../fonts/FranklinGothic-Demi.woff2') format('woff2'),
        url('../fonts/FranklinGothic-Demi.woff') format('woff'),
        url('../fonts/FranklinGothic-Demi.ttf') format('truetype'),
        url('../fonts/FranklinGothic-Demi.svg#FranklinGothic-Demi') format('svg');
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: 'Franklin Gothic Demi Cond';
    src: url('../fonts/FranklinGothic-DemiCond.eot');
    src: local('Franklin Gothic Demi Cond'), local('FranklinGothic-DemiCond'),
        url('../fonts/FranklinGothic-DemiCond.eot?#iefix') format('embedded-opentype'),
        url('../fonts/FranklinGothic-DemiCond.woff2') format('woff2'),
        url('../fonts/FranklinGothic-DemiCond.woff') format('woff'),
        url('../fonts/FranklinGothic-DemiCond.ttf') format('truetype'),
        url('../fonts/FranklinGothic-DemiCond.svg#FranklinGothic-DemiCond') format('svg');
    font-weight: normal;
    font-style: normal;
}

@mixin messina () {
    font-family: 'Messina Serif';
    font-weight: 700;
}

@mixin minion () {
    font-family: 'Minion Pro';
    font-weight: 400;
}

@mixin founders ($weight: 400) {
    font-family: 'Founders Grotesk';
    font-weight: $weight;
}

@mixin background-size($backgroundsize) {
	-webkit-background-size:$backgroundsize;
	-moz-background-size:$backgroundsize;
	-ms-background-size:$backgroundsize;
	-o-background-size:$backgroundsize;
	background-size:$backgroundsize;
}
